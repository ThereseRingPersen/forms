{"version":3,"sources":["styles/globalStyle.ts","styles/layout.ts","components/TextField/formColors.ts","components/TextField/styles.ts","components/TextField/index.tsx","components/Button/buttonColors.ts","components/Button/Button.tsx","components/Form/inputHook.ts","components/Form/validation.ts","components/Form/LoginForm/LoginForm.tsx","components/Form/formHook.ts","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","CenteredLayout","styled","div","formColors","dark","light","default","inactive","active","hover","focus","error","helperText","Input","input","props","hasError","InputGroup","isActive","InputAndLabelContainer","Label","label","isFocused","HelperText","ErrorText","FormGroup","IconContainer","span","TextField","id","errorMessage","type","onChange","onBlur","onFocus","value","leadingIcon","trailingIcon","icon","size","color","getIcon","autoComplete","htmlFor","buttonColors","primary","primaryHover","primaryPressed","Button","button","useInput","initial","validations","useState","setValue","errors","setErrors","touched","setTouched","setIsActive","isValidating","setIsValidating","setIsFocused","isValid","length","clear","useCallback","e","target","checked","reset","a","newErrors","Promise","all","map","validation","result","push","validate","submit","emailFormatValidation","email","test","passwordValidation","password","LoginForm","emailHook","passwordHook","form","inputs","values","setValues","useEffect","iterateValues","Object","keys","key","some","every","newValues","entries","forEach","k","v","isEqual","console","log","JSON","stringify","undefined","useForm","disabled","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o2BACA,IAwCeA,EAxCKC,YAAH,K,gXCCV,IAAMC,EAAiBC,IAAOC,IAAV,KCFrBC,EACe,CACbC,KAAM,UACNC,MAAO,UACPC,QAAS,WAJXH,EAMK,CACHI,SAAU,UACVC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,MAAO,UACPC,WAAY,W,4rDCRb,IAAMC,EAAQZ,IAAOa,MAAV,KAWD,SAACC,GAAD,OAAYA,EAAMC,SAAWb,EAAiBQ,MAAQR,EAAiBM,SAE3E,SAACM,GAAD,OAAYA,EAAMC,SAAWb,EAAiBQ,MAAQR,EAAiBK,UAEvES,EAAahB,IAAOC,IAAV,KAML,SAACa,GAAD,OAAYA,EAAMC,SAAN,gCAA0Cb,EAAiBQ,OAA3D,OACN,SAACI,GAAD,OAChBA,EAAMG,SAAWf,EAA2BC,KAAOD,EAA2BE,SAEhE,SAACU,GAAD,OACVA,EAAMC,SAAN,gCAC+Bb,EAAiBQ,OADhD,iCAEgCR,EAAiBM,UAIjB,SAACM,GAAD,OAAYA,EAAMC,SAAWb,EAAiBQ,MAAQR,EAAiBO,SAGtGS,EAAyBlB,IAAOC,IAAV,KAMtBkB,EAAQnB,IAAOoB,MAAV,KAOP,SAACN,GAAD,OAAYA,EAAMG,SAAW,MAAQ,UAC/B,SAACH,GAAD,OAAYA,EAAMG,SAAW,SAAW,UAC5C,SAACH,GAAD,OAwBOC,EAxBeD,EAAMC,SAwBFE,EAxBYH,EAAMG,SAwBCI,EAxBSP,EAAMO,UAyBjEN,EACOb,EAAiBQ,MACjBW,EACAnB,EAAiBO,MACjBQ,EACAf,EAAiBK,OAEjBL,EAAiBI,SARhC,IAAoBS,EAAmBE,EAAmBI,KAtB7CC,EAAatB,IAAOC,IAAV,IAGVC,EAAiBS,YAGjBY,EAAYvB,IAAOC,IAAV,IACTC,EAAiBQ,OAGjBc,EAAYxB,IAAOC,IAAV,KAMTwB,EAAgBzB,IAAO0B,KAAV,K,WCHXC,EAtDG,SAAC,GAcI,IAbnBC,EAakB,EAblBA,GACAR,EAYkB,EAZlBA,MACAT,EAWkB,EAXlBA,WACAkB,EAUkB,EAVlBA,aACAZ,EASkB,EATlBA,SACAa,EAQkB,EARlBA,KACAC,EAOkB,EAPlBA,SACAC,EAMkB,EANlBA,OACAC,EAKkB,EALlBA,QACAC,EAIkB,EAJlBA,MACAb,EAGkB,EAHlBA,UACAc,EAEkB,EAFlBA,YAEkB,EADlBC,aAEA,OACI,kBAACZ,EAAD,KACI,kBAACR,EAAD,CAAYC,SAAUA,EAAUF,SAA2B,OAAjBc,GACtC,kBAACJ,EAAD,KAAgBU,GA0B5B,SAAiBE,GACb,OAAQA,GACJ,IAAK,QACD,OAAO,kBAAC,IAAD,CAAQC,KAAM,GAAIC,MAAOrC,EAAiBI,WACrD,QACI,OAAO,kBAAC,IAAD,CAAQgC,KAAM,GAAIC,MAAOrC,EAAiBI,YA/BlBkC,CAAQL,IACvC,kBAACjB,EAAD,CAAwBD,SAAUA,EAAUF,SAA2B,OAAjBc,GAClD,kBAACjB,EAAD,CACIgB,GAAIA,EACJE,KAAMA,EACNb,SAAUA,EACVF,SAA2B,OAAjBc,EACVE,SAAUA,EACVC,OAAQA,EACRC,QAASA,EACTC,MAAOA,EACPO,aAAc,QAElB,kBAACtB,EAAD,CAAOuB,QAASd,EAAIX,SAAUA,EAAUI,UAAWA,EAAWN,SAA2B,OAAjBc,GACnET,IAGT,kBAACK,EAAD,KACKI,GAAgB,kBAAC,IAAD,CAASS,KAAM,OAAQC,MAAOrC,EAAiBQ,UAIvEC,GAA+B,OAAjBkB,GAAyB,kBAACP,EAAD,KAAaX,EAAb,KACtB,OAAjBkB,GAAyB,kBAACN,EAAD,KAAYM,KCxD5Cc,EACe,CACbC,QAAS,UACTC,aAAc,UACdC,eAAgB,WAJlBH,EAMI,CACFC,QAAS,UACTC,aAAc,UACdC,eAAgB,W,wiBCNxB,IAwBeC,EAxBA/C,IAAOgD,OAAV,IAQML,EAA6BC,QAClCD,EAAkBC,QAGFD,EAA6BC,QAQpCD,EAA6BE,aAClCF,EAAkBE,c,8BCpB5B,SAASI,EAAYC,EAArB,GAAuF,IAAD,IAAnDC,mBAAmD,MAArC,GAAqC,IAC/DC,mBAAYF,GADmD,mBAClFhB,EADkF,KAC3EmB,EAD2E,OAE7DD,mBAAmB,IAF0C,mBAElFE,EAFkF,KAE1EC,EAF0E,OAG3DH,oBAAkB,GAHyC,mBAGlFI,EAHkF,KAGzEC,EAHyE,OAIzDL,oBAAkB,GAJuC,mBAIlFnC,EAJkF,KAIxEyC,EAJwE,OAKjDN,oBAAS,GALwC,mBAKlFO,EALkF,KAKpEC,EALoE,OAMvDR,oBAAS,GAN8C,mBAMlF/B,EANkF,KAMvEwC,EANuE,KAQnFC,EAA4B,IAAlBR,EAAOS,OAIvB,IAAMC,EAAQC,uBAAY,WACC,kBAAZf,GACPG,EAAS,MAEd,CAACH,IACEnB,EAAWkC,uBAAY,SAACC,GACJ,aAAlBA,EAAEC,OAAOrC,KACTuB,EAASa,EAAEC,OAAOC,SAElBf,EAASa,EAAEC,OAAOjC,SAEvB,IACGmC,EAAQJ,uBAAY,WACtBZ,EAASH,KACV,CAACA,IAEElB,EAASiC,uBAAY,WAAM,4CAG7B,4BAAAK,EAAA,6DACIV,GAAgB,GACZW,EAAsB,GAF9B,SAGUC,QAAQC,IACVtB,EAAYuB,IAAZ,uCAAgB,WAAOC,GAAP,eAAAL,EAAA,sEACSK,EAAWzC,GADpB,QACN0C,EADM,SAGRL,EAAUM,KAAKD,GAHP,2CAAhB,wDAJR,OAWIrB,EAAUgB,GACW,kBAAVrC,EACPwB,EAAYxB,EAAM6B,OAAS,GACH,mBAAV7B,GACdwB,EAAYxB,GAEhB0B,GAAgB,GAjBpB,4CAH6B,sBAC7BH,GAAW,GACXI,GAAa,GAFgB,mCAsB7BiB,KACD,CAAC3B,EAAajB,IACXD,EAAUgC,uBAAY,WACxBV,EAAU,IACVM,GAAa,GACbH,GAAY,KACb,IACH,MAAO,CACHqB,OA/CJ,aAgDI7C,QACAmB,WACAC,SACAC,YACAC,UACAC,aACAO,QACAK,QACAtC,WACAC,SACAC,UACA6B,UACAH,eACA1C,WACAI,a,WC3EK2D,EAAwB,SAACC,GAGlC,OAAqB,IAAjBA,EAAMlB,OACC,qBAHC,0JAKHmB,KAAKD,QAAd,EACW,8BAIFE,EAAqB,SAACC,GAC/B,OAAIA,EAASrB,OAAS,EACX,wBAEPqB,EAASrB,OAAS,EACX,gDADX,GCyCWsB,EA9CG,WACd,IAAMC,EAAYrC,EAAiB,GAAI,CACnCE,YAAa,CAAC6B,KAEZO,EAAetC,EAAiB,GAAI,CACtCE,YAAa,CAACgC,KAEZK,ECfa,WAA6B,IAA5BC,EAA2B,uDAAP,GAAO,EACrBrC,mBAAqB,IADA,mBAC1CsC,EAD0C,KAClCC,EADkC,OAErBvC,mBAAqB,IAFA,mBAE1CE,EAF0C,KAElCC,EAFkC,KAI/CqC,qBAAU,WACNC,OAGJ,IAAMlC,EAAemC,OAAOC,KAAKN,GAC5Bf,KAAI,SAACsB,GACF,OAAOP,EAAOO,MAEjBC,MAAK,SAACpF,GACH,OAAOA,EAAM8C,gBAEfG,GACDH,GACDmC,OAAOC,KAAKN,GACPf,KAAI,SAAC7D,GACF,OAAO4E,EAAO5E,MAEjBqF,OAAM,SAACrF,GAAD,OAAWA,EAAMiD,WAEhC,SAAS+B,IACL,IAAIM,EAAwB,GACxB5B,EAAwB,GAE5BuB,OAAOM,QAAQX,GAAQY,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvCJ,EAAUG,GAAKC,EAAErE,MACjBqC,EAAU+B,GAAKC,EAAEjD,UAEhBkD,kBAAQd,EAAQS,IACjBR,EAAUQ,GAETK,kBAAQlD,EAAQiB,IACjBhB,EAAUgB,GAGlB,SAASQ,IACL0B,QAAQC,IAAI,mBAAqBC,KAAKC,UAAUlB,OAAQmB,EAAW,IAEvE,IAAMxC,EAAQJ,uBAAY,WACtB6B,OAAOC,KAAKN,GACPf,KAAI,SAAC7D,GACF,OAAO4E,EAAO5E,MAEjBwF,SAAQ,SAACxF,GAAD,OAAWA,EAAMwD,aAC/B,CAACoB,IACEzB,EAAQC,uBAAY,WACtB6B,OAAOC,KAAKN,GACPf,KAAI,SAAC7D,GACF,OAAO4E,EAAO5E,MAEjBwF,SAAQ,SAACxF,GAAD,OAAWA,EAAMmD,aAC/B,CAACyB,IACJ,MAAO,CACHC,SACApC,SACAQ,UACAH,eACAU,QACAL,QACAe,UD/CS+B,CAAQ,CAAExB,YAAWC,iBAElC,OACI,kBAACxF,EAAD,KACI,qCACA,kBAAC,EAAD,CACI+B,KAAM,QACNF,GAAI,QACJR,MAAO,QACPS,aAAcyD,EAAUhC,OAAO,GAAKgC,EAAUhC,OAAO,GAAK,KAC1DrC,SAAUqE,EAAUrE,SACpBc,SAAUuD,EAAUvD,SACpBC,OAAQsD,EAAUtD,OAClBC,QAASqD,EAAUrD,QACnBZ,UAAWiE,EAAUjE,UACrBa,MAAOoD,EAAUpD,MACjBC,YAAa,UAEjB,kBAAC,EAAD,CACIL,KAAM,WACNF,GAAI,WACJR,MAAO,WACPS,aAAc0D,EAAajC,OAAO,GAAKiC,EAAajC,OAAO,GAAK,KAChErC,SAAUsE,EAAatE,SACvBc,SAAUwD,EAAaxD,SACvBC,OAAQuD,EAAavD,OACrBC,QAASsD,EAAatD,QACtBZ,UAAWkE,EAAalE,UACxBa,MAAOqD,EAAarD,MACpBvB,WAAY,gCACZwB,YAAa,aAEjB,kBAAC,EAAD,CAAQL,KAAK,SAASiF,UAAWvB,EAAK1B,QAASkD,QAASxB,EAAKT,QAA7D,WEvCGkC,EARH,WACR,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.d930368e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nconst GlobalStyle = createGlobalStyle`\nbody {\n    *{\n        box-sizing: border-box;\n    }\n    display: flex;\n    flex-direction: column;\n    padding: 50px;\n    font-family:Arial, Helvetica, sans-serif;\n    font-size:100%;\n}\n\nh1 {\n    margin: 0.67em 0;\n    font-size: 2.5em;\n    font-weight: 100;\n    color: #4b0082;\n   \n    }\nh2 {\n    margin: 0.83em 0;\n    font-size: 2em;\n    font-weight: 100;\n    color:#4b0082;\n    }\nh3{\n    margin: 0.83em 0;\n    font-size: 1.5em;\n    font-weight: 100;\n    }\nh4 {\n    margin: 0.5em 0;\n    font-size: 1.25em;\n    font-weight: 700;\n    }\n    \np {\n    font-size: 1em;\n    }\n`;\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nexport const CenteredLayout = styled.div`\n    width: 25rem;\n    height: 25rem;\n    max-width: 600px;\n    max-height: 600px;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n    border: 0.1rem solid #4b0082;\n    border-radius: 0.313rem;\n`;\n","const formColors = {\n    backgroundColor: {\n        dark: '#E0E0E0',\n        light: '#E8E8E8',\n        default: '#F0F0F0',\n    },\n    color: {\n        inactive: '#808080',\n        active: '#101010',\n        hover: '#101010',\n        focus: '#5A0740',\n        error: '#CC0000',\n        helperText: '#888888',\n    },\n};\n\nexport { formColors };\n","import styled from 'styled-components';\nimport { formColors } from './formColors';\nimport { InputProps, LabelProps, InputGroupProps } from './types';\n\nexport const Input = styled.input<InputProps>`\n    position: absolute;\n    width: 14rem;\n    height: auto;\n    padding: 1.5rem 0 0 0.5rem;\n    line-height: 1.25rem;\n    font-size: 1rem;\n    border: none;\n    background-color: inherit;\n    outline: none;\n    :focus {\n        color: ${(props) => (props.hasError ? formColors.color.error : formColors.color.hover)};\n    }\n    color: ${(props) => (props.hasError ? formColors.color.error : formColors.color.active)};\n`;\nexport const InputGroup = styled.div<InputGroupProps>`\n    display: flex;\n    height: 3.6rem;\n    line-height: 1.5rem;\n    width: 18rem;\n    border-radius: 0.313rem 0.313rem 0 0;\n    box-shadow: ${(props) => (props.hasError ? `inset 0 -0.125rem 0 0 ${formColors.color.error}` : `0`)};\n    background-color: ${(props) =>\n        props.isActive ? formColors.backgroundColor.dark : formColors.backgroundColor.light};\n    :hover {\n        box-shadow: ${(props) =>\n            props.hasError\n                ? `inset 0 -0.125rem 0 0 ${formColors.color.error}`\n                : `inset 0 -0.0625rem 0 0 ${formColors.color.hover}`};\n    }\n    :focus-within,\n    :focus {\n        box-shadow: inset 0 -0.125rem 0 0 ${(props) => (props.hasError ? formColors.color.error : formColors.color.focus)};\n    }\n`;\nexport const InputAndLabelContainer = styled.div<InputProps>`\n    position: relative;\n    width: 12rem;\n    float: left;\n    flex-grow: 1;\n`;\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    height: 1.3rem;\n    line-height: 1.25rem;\n    padding-left: 0.5rem;\n    width: 10rem;\n    background-color: transparent;\n    top: ${(props) => (props.isActive ? '5px' : '24px')};\n    font-size: ${(props) => (props.isActive ? '0.8rem' : '1rem')};\n    color: ${(props) => labelColor(props.hasError, props.isActive, props.isFocused)};\n`;\nexport const HelperText = styled.div`\n    height: 1.3rem;\n    line-height: 1rem;\n    color: ${formColors.color.helperText};\n    font-size: 0.7rem;\n`;\nexport const ErrorText = styled.div`\n    color: ${formColors.color.error};\n    font-size: 0.7rem;\n`;\nexport const FormGroup = styled.div`\n    margin-bottom: 0.7rem;\n    width: 18rem;\n    height: 4.5rem;\n`;\n\nexport const IconContainer = styled.span`\n    width: 1.5rem;\n    margin: 0.5rem 0.2rem 0 0.2rem;\n    align-self: center;\n`;\n\nfunction labelColor(hasError: boolean, isActive: boolean, isFocused: boolean) {\n    if (hasError) {\n        return formColors.color.error;\n    } else if (isFocused) {\n        return formColors.color.focus;\n    } else if (isActive) {\n        return formColors.color.active;\n    } else {\n        return formColors.color.inactive;\n    }\n}\n","import React from 'react';\nimport {\n    InputAndLabelContainer,\n    FormGroup,\n    Input,\n    InputGroup,\n    Label,\n    ErrorText,\n    HelperText,\n    IconContainer,\n} from './styles';\nimport { TextFieldProps, LeadingIcon } from './types';\nimport { MdLock, MdMail, MdError } from 'react-icons/md';\nimport { formColors } from './formColors';\n\nconst TextField = ({\n    id,\n    label,\n    helperText,\n    errorMessage,\n    isActive,\n    type,\n    onChange,\n    onBlur,\n    onFocus,\n    value,\n    isFocused,\n    leadingIcon,\n    trailingIcon,\n}: TextFieldProps) => {\n    return (\n        <FormGroup>\n            <InputGroup isActive={isActive} hasError={errorMessage !== null}>\n                <IconContainer>{leadingIcon && getIcon(leadingIcon)}</IconContainer>\n                <InputAndLabelContainer isActive={isActive} hasError={errorMessage !== null}>\n                    <Input\n                        id={id}\n                        type={type}\n                        isActive={isActive}\n                        hasError={errorMessage !== null}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onFocus={onFocus}\n                        value={value}\n                        autoComplete={'off'}\n                    />\n                    <Label htmlFor={id} isActive={isActive} isFocused={isFocused} hasError={errorMessage !== null}>\n                        {label}\n                    </Label>\n                </InputAndLabelContainer>\n                <IconContainer>\n                    {errorMessage && <MdError size={'24px'} color={formColors.color.error} />}\n                </IconContainer>\n            </InputGroup>\n\n            {helperText && errorMessage === null && <HelperText>{helperText} </HelperText>}\n            {errorMessage !== null && <ErrorText>{errorMessage}</ErrorText>}\n        </FormGroup>\n    );\n    function getIcon(icon: LeadingIcon) {\n        switch (icon) {\n            case 'email':\n                return <MdMail size={24} color={formColors.color.inactive} />;\n            default:\n                return <MdLock size={24} color={formColors.color.inactive} />;\n        }\n    }\n};\n\nexport default TextField;\n","const buttonColors = {\n    backgroundColor: {\n        primary: '#4b0082',\n        primaryHover: '#663399',\n        primaryPressed: '#101010',\n    },\n    text: {\n        primary: '#F5F5F5',\n        primaryHover: '#F5F5F5',\n        primaryPressed: '#101010',\n    },\n};\nexport { buttonColors };\n","import styled from 'styled-components';\nimport { buttonColors } from './buttonColors';\n\nconst Button = styled.button`\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0.625rem 0;\n    outline: none;\n    font-size: 1.2rem;\n    background: ${buttonColors.backgroundColor.primary};\n    color: ${buttonColors.text.primary};\n    width: 18rem;\n    height: 3rem;\n    border: 0.125rem solid ${buttonColors.backgroundColor.primary};\n    border-radius: 0.313rem;\n    padding: 1.2rem;\n    outline: none;\n    :hover,\n    :active,\n    :focus {\n        transition: all 0.2s;\n        background: ${buttonColors.backgroundColor.primaryHover};\n        color: ${buttonColors.text.primaryHover};\n    }\n`;\nexport default Button;\n","import { useState, useCallback } from 'react';\nimport { UseInputOptions, InputHook } from './types';\n\n// TODO get rid of any\nexport function useInput<T>(initial: T, { validations = [] }: UseInputOptions): InputHook<T> {\n    const [value, setValue] = useState<T>(initial);\n    const [errors, setErrors] = useState<string[]>([]);\n    const [touched, setTouched] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    const isValid = errors.length === 0;\n\n    // TODO\n    function submit() {}\n    const clear = useCallback(() => {\n        if (typeof initial === 'string') {\n            setValue('' as any); // TODO Get rid of any\n        }\n    }, [initial]);\n    const onChange = useCallback((e: any) => {\n        if (e.target.type === 'checkbox') {\n            setValue(e.target.checked);\n        } else {\n            setValue(e.target.value);\n        }\n    }, []);\n    const reset = useCallback(() => {\n        setValue(initial);\n    }, [initial]);\n\n    const onBlur = useCallback(() => {\n        setTouched(true);\n        setIsFocused(false);\n        async function validate(): Promise<void> {\n            setIsValidating(true);\n            let newErrors: string[] = [];\n            await Promise.all(\n                validations.map(async (validation) => {\n                    const result = await validation(value);\n                    if (result) {\n                        newErrors.push(result);\n                    }\n                }),\n            );\n            setErrors(newErrors);\n            if (typeof value === 'string') {\n                setIsActive(value.length > 0);\n            } else if (typeof value === 'boolean') {\n                setIsActive(value);\n            }\n            setIsValidating(false);\n        }\n        validate();\n    }, [validations, value]);\n    const onFocus = useCallback(() => {\n        setErrors([]);\n        setIsFocused(true);\n        setIsActive(true);\n    }, []);\n    return {\n        submit,\n        value,\n        setValue,\n        errors,\n        setErrors,\n        touched,\n        setTouched,\n        clear,\n        reset,\n        onChange,\n        onBlur,\n        onFocus,\n        isValid,\n        isValidating,\n        isActive,\n        isFocused,\n    };\n}\n","import { ValidationResult } from './types';\n\nexport const emailFormatValidation = (email: string): ValidationResult => {\n    const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (email.length === 0) {\n        return 'Email is required.';\n    }\n    if (!reg.test(email)) {\n        return 'Email format is incorrect.';\n    }\n};\n\nexport const passwordValidation = (password: string): ValidationResult => {\n    if (password.length < 1) {\n        return 'Password is required.';\n    }\n    if (password.length < 8) {\n        return 'Password must have minimum 8 characters.';\n    }\n};\n","import React from 'react';\nimport { CenteredLayout } from '../../../styles/layout';\nimport TextField from '../../TextField';\nimport Button from '../../Button/Button';\nimport { useInput } from '../inputHook';\nimport { useForm } from '../formHook';\nimport { emailFormatValidation, passwordValidation } from '../validation';\ntype LoginUser = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const emailHook = useInput<string>('', {\n        validations: [emailFormatValidation],\n    });\n    const passwordHook = useInput<string>('', {\n        validations: [passwordValidation],\n    });\n    const form = useForm({ emailHook, passwordHook });\n\n    return (\n        <CenteredLayout>\n            <h2>Login</h2>\n            <TextField\n                type={'email'}\n                id={'email'}\n                label={'Email'}\n                errorMessage={emailHook.errors[0] ? emailHook.errors[0] : null}\n                isActive={emailHook.isActive}\n                onChange={emailHook.onChange}\n                onBlur={emailHook.onBlur}\n                onFocus={emailHook.onFocus}\n                isFocused={emailHook.isFocused}\n                value={emailHook.value}\n                leadingIcon={'email'}\n            />\n            <TextField\n                type={'password'}\n                id={'password'}\n                label={'Password'}\n                errorMessage={passwordHook.errors[0] ? passwordHook.errors[0] : null}\n                isActive={passwordHook.isActive}\n                onChange={passwordHook.onChange}\n                onBlur={passwordHook.onBlur}\n                onFocus={passwordHook.onFocus}\n                isFocused={passwordHook.isFocused}\n                value={passwordHook.value}\n                helperText={'Must be at least 8 characters'}\n                leadingIcon={'password'}\n            />\n            <Button type=\"submit\" disabled={!form.isValid} onClick={form.submit}>\n                Login\n            </Button>\n        </CenteredLayout>\n    );\n};\n\nexport default LoginForm;\n","import { useState, useCallback, useEffect } from 'react';\nimport { FormValues, FormErrors, FormProps } from './types';\nimport { isEqual } from 'lodash';\n\nexport const useForm = (inputs: FormProps = {}) => {\n    let [values, setValues] = useState<FormValues>({});\n    let [errors, setErrors] = useState<FormErrors>({});\n\n    useEffect(() => {\n        iterateValues();\n    });\n\n    const isValidating = Object.keys(inputs as FormProps)\n        .map((key: string) => {\n            return inputs[key];\n        })\n        .some((input) => {\n            return input.isValidating;\n        });\n    const isValid =\n        !isValidating &&\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .every((input) => input.isValid);\n\n    function iterateValues() {\n        let newValues: FormValues = {};\n        let newErrors: FormErrors = {};\n\n        Object.entries(inputs).forEach(([k, v]) => {\n            newValues[k] = v.value;\n            newErrors[k] = v.errors;\n        });\n        if (!isEqual(values, newValues)) {\n            setValues(newValues);\n        }\n        if (!isEqual(errors, newErrors)) {\n            setErrors(newErrors);\n        }\n    }\n    function submit() {\n        console.log('submitted values' + JSON.stringify(values, undefined, 2)); // TODO\n    }\n    const reset = useCallback(() => {\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .forEach((input) => input.reset());\n    }, [inputs]);\n    const clear = useCallback(() => {\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .forEach((input) => input.clear());\n    }, [inputs]);\n    return {\n        values,\n        errors,\n        isValid,\n        isValidating,\n        reset,\n        clear,\n        submit,\n    };\n};\n","import React from 'react';\nimport GlobalStyle from './styles/globalStyle';\nimport LoginForm from './components/Form/LoginForm/LoginForm';\n\nconst App = () => {\n    return (\n        <>\n            <GlobalStyle />\n            <LoginForm />\n        </>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}