{"version":3,"sources":["styles/media.ts","styles/colors.ts","styles/globalStyle.ts","styles/layout.ts","components/TextField/formColors.ts","components/TextField/styles.ts","components/TextField/TextField.tsx","components/Button/Button.tsx","components/Form/inputHook.ts","components/Form/validation.ts","components/Form/LoginForm/LoginForm.tsx","components/Form/formHook.ts","App.tsx","index.tsx"],"names":["breakPoints","sm","md","lg","xl","media","Object","keys","reduce","acc","key","style","colors","light","medium","dark","textDark","white","GlobalStyle","createGlobalStyle","CenteredBox","styled","div","formColors","iconColor","grey","fieldBackround","active","hover","initial","fieldText","helperText","label","notActivated","focus","error","disabled","border","Input","input","InputGroup","props","hasError","InputAndLabelContainer","Label","isActive","isFocused","labelColor","HelperText","ErrorText","FormGroup","IconContainer","span","TextField","id","errorMessage","type","onChange","onBlur","onFocus","value","leadingIcon","trailingIcon","icon","size","color","getIcon","autoComplete","htmlFor","Button","button","useInput","validations","useState","setValue","errors","setErrors","touched","setTouched","setIsActive","isValidating","setIsValidating","setIsFocused","isValid","length","clear","useCallback","e","target","checked","reset","a","newErrors","Promise","all","map","validation","result","push","validate","submit","emailFormatValidation","email","test","passwordValidation","password","LoginForm","emailHook","passwordHook","form","inputs","values","setValues","useEffect","iterateValues","some","every","newValues","entries","forEach","k","v","isEqual","console","log","JSON","stringify","undefined","useForm","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAAMA,EAAc,CAChBC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJC,GAAI,UAGKC,EAASC,OAAOC,KAAKP,GAAiDQ,QAAO,SAACC,EAAKC,GAE5F,OADAD,EAAIC,GAAO,SAACC,GAAD,mCAAyCX,EAAYU,GAArD,eAAgEC,EAAhE,OACJF,IACR,ICVUG,EACA,CACLC,MAAO,UACPC,OAAQ,UACRC,KAAM,WAJDH,EAMH,CACFC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,SAAU,WAVLJ,EAYJ,UAZIA,EAaH,CACFK,MAAO,UACPJ,MAAO,UACPC,OAAQ,UACRC,KAAM,W,mvBCbP,IAAMG,EAAcC,YAAH,IAUXP,EAAYG,KACnBV,EAAMJ,GAXY,M,2fCAjB,IAAMmB,EAAcC,IAAOC,IAAV,IAWGV,EAAeG,KAEpCV,EAAMJ,GAbY,MCHlBsB,EAAa,CACfC,UAAU,CACNC,KAAMb,EAAYE,QAEtBY,eAAgB,CACZC,OAAQf,EAAYG,KACpBa,MAAOhB,EAAYE,OACnBe,QAASjB,EAAYC,OAEzBiB,UAAWlB,EAAYG,KACvBgB,WAAYnB,EAAYC,MACxBmB,MAAO,CACHC,aAAcrB,EAAYE,OAC1BoB,MAAOtB,EAAeE,OACtBqB,MAAOvB,EACPwB,SAAUxB,EAAYC,OAE1BwB,OAAQ,CACJF,MAAOvB,EACPsB,MAAOtB,EAAeE,OACtBa,OAAQf,EAAYG,KACpBa,MAAOhB,EAAYE,OACnBmB,aAAcrB,EAAYC,Q,2yDClB3B,IAAMyB,EAAQjB,IAAOkB,MAAV,IASLhB,EAAWO,WAGXU,EAAanB,IAAOC,IAAV,IAIjBjB,EAAMJ,GAJW,KAQCsB,EAAWG,eAAeG,SAChC,SAACY,GAAD,OACVA,EAAMC,SAAN,6BAC4BnB,EAAWc,OAAOF,OAD9C,6BAE4BZ,EAAWc,OAAOJ,gBAE1BV,EAAWG,eAAeE,OAChC,SAACa,GAAD,OACVA,EAAMC,SAAN,6BAC4BnB,EAAWc,OAAOF,OAD9C,6BAE4BZ,EAAWc,OAAOT,SAK9BL,EAAWG,eAAeC,QACb,SAACc,GAAD,OAAYA,EAAMC,SAAWnB,EAAWc,OAAOF,MAAQZ,EAAWc,OAAOH,SAIrGS,EAAyBtB,IAAOC,IAAV,KAMtBsB,EAAQvB,IAAOW,MAAV,KAMP,SAACS,GAAD,OAAYA,EAAMI,SAAW,MAAQ,UAC/B,SAACJ,GAAD,OAAYA,EAAMI,SAAW,SAAW,UAC5C,SAACJ,GAAD,OA8Bb,SAAoBC,EAAmBI,GACnC,GAAIJ,EACA,OAAOnB,EAAWS,MAAMG,MACrB,GAAIW,EACP,OAAOvB,EAAWS,MAAME,MAE5B,OAAOX,EAAWS,MAAMC,aApCJc,CAAWN,EAAMC,SAAUD,EAAMK,cAG5CE,EAAa3B,IAAOC,IAAV,IACVC,EAAWQ,YAKXkB,EAAY5B,IAAOC,IAAV,IACTC,EAAWS,MAAMG,OAKjBe,EAAY7B,IAAOC,IAAV,IAIhBjB,EAAMJ,GAJU,MASTkD,EAAgB9B,IAAO+B,KAAV,K,WCpEbC,EAAY,SAAC,GAcH,IAbnBC,EAakB,EAblBA,GACAtB,EAYkB,EAZlBA,MACAD,EAWkB,EAXlBA,WACAwB,EAUkB,EAVlBA,aACAV,EASkB,EATlBA,SACAW,EAQkB,EARlBA,KACAC,EAOkB,EAPlBA,SACAC,EAMkB,EANlBA,OACAC,EAKkB,EALlBA,QACAC,EAIkB,EAJlBA,MACAd,EAGkB,EAHlBA,UACAe,EAEkB,EAFlBA,YAEkB,EADlBC,aAEA,OACI,kBAACZ,EAAD,KACI,kBAACV,EAAD,CAAYK,SAAUA,EAAUH,SAA2B,OAAjBa,GACtC,kBAACJ,EAAD,KAAgBU,GA0B5B,SAAiBE,GACb,OAAQA,GACJ,IAAK,QACD,OAAO,kBAAC,IAAD,CAAQC,KAAM,GAAIC,MAAO1C,EAAWC,UAAUC,OACzD,QACI,OAAO,kBAAC,IAAD,CAAQuC,KAAM,GAAIC,MAAO1C,EAAWC,UAAUC,QA/BtByC,CAAQL,IACvC,kBAAClB,EAAD,CAAwBE,SAAUA,EAAUH,SAA2B,OAAjBa,GAClD,kBAACjB,EAAD,CACIgB,GAAIA,EACJE,KAAMA,EACNX,SAAUA,EACVH,SAA2B,OAAjBa,EACVE,SAAUA,EACVC,OAAQA,EACRC,QAASA,EACTC,MAAOA,EACPO,aAAc,QAElB,kBAACvB,EAAD,CAAOwB,QAASd,EAAIT,SAAUA,EAAUC,UAAWA,EAAWJ,SAA2B,OAAjBa,GACnEvB,IAGT,kBAACmB,EAAD,KACKI,GAAgB,kBAAC,IAAD,CAASS,KAAM,OAAQC,MAAO1C,EAAWS,MAAMG,UAIvEJ,GAA+B,OAAjBwB,GAAyB,kBAACP,EAAD,KAAajB,EAAb,KACtB,OAAjBwB,GAAyB,kBAACN,EAAD,KAAYM,K,ooBCrDlD,IA2Bec,EA3BAhD,IAAOiD,OAAV,IASM1D,EAAeG,KACpBH,EAAYK,MAEnBZ,EAAMJ,GAZA,KAwBUW,EAAeE,Q,8BCvB9B,SAASyD,EAAY1C,EAArB,GAAuF,IAAD,IAAnD2C,mBAAmD,MAArC,GAAqC,IAC/DC,mBAAY5C,GADmD,mBAClF+B,EADkF,KAC3Ec,EAD2E,OAE7DD,mBAAmB,IAF0C,mBAElFE,EAFkF,KAE1EC,EAF0E,OAG3DH,oBAAkB,GAHyC,mBAGlFI,EAHkF,KAGzEC,EAHyE,OAIzDL,oBAAkB,GAJuC,mBAIlF5B,EAJkF,KAIxEkC,EAJwE,OAKjDN,oBAAS,GALwC,mBAKlFO,EALkF,KAKpEC,EALoE,OAMvDR,oBAAS,GAN8C,mBAMlF3B,EANkF,KAMvEoC,EANuE,KAQnFC,EAA4B,IAAlBR,EAAOS,OAIvB,IAAMC,EAAQC,uBAAY,WACC,kBAAZzD,GACP6C,EAAS,MAEd,CAAC7C,IACE4B,EAAW6B,uBAAY,SAACC,GACJ,aAAlBA,EAAEC,OAAOhC,KACTkB,EAASa,EAAEC,OAAOC,SAElBf,EAASa,EAAEC,OAAO5B,SAEvB,IACG8B,EAAQJ,uBAAY,WACtBZ,EAAS7C,KACV,CAACA,IAEE6B,EAAS4B,uBAAY,WAAM,4CAG7B,4BAAAK,EAAA,6DACIV,GAAgB,GACZW,EAAsB,GAF9B,SAGUC,QAAQC,IACVtB,EAAYuB,IAAZ,uCAAgB,WAAOC,GAAP,eAAAL,EAAA,sEACSK,EAAWpC,GADpB,QACNqC,EADM,SAGRL,EAAUM,KAAKD,GAHP,2CAAhB,wDAJR,OAWIrB,EAAUgB,GACW,kBAAVhC,EACPmB,EAAYnB,EAAMwB,OAAS,GACH,mBAAVxB,GACdmB,EAAYnB,GAEhBqB,GAAgB,GAjBpB,4CAH6B,sBAC7BH,GAAW,GACXI,GAAa,GAFgB,mCAsB7BiB,KACD,CAAC3B,EAAaZ,IACXD,EAAU2B,uBAAY,WACxBV,EAAU,IACVM,GAAa,GACbH,GAAY,KACb,IACH,MAAO,CACHqB,OA/CJ,aAgDIxC,QACAc,WACAC,SACAC,YACAC,UACAC,aACAO,QACAK,QACAjC,WACAC,SACAC,UACAwB,UACAH,eACAnC,WACAC,a,WC3EKuD,EAAwB,SAACC,GAGlC,OAAqB,IAAjBA,EAAMlB,OACC,qBAHC,0JAKHmB,KAAKD,QAAd,EACW,8BAIFE,EAAqB,SAACC,GAC/B,OAAIA,EAASrB,OAAS,EACX,wBAEPqB,EAASrB,OAAS,EACX,gDADX,GCyCWsB,EA9CG,WACd,IAAMC,EAAYpC,EAAiB,GAAI,CACnCC,YAAa,CAAC6B,KAEZO,EAAerC,EAAiB,GAAI,CACtCC,YAAa,CAACgC,KAEZK,ECfa,WAA6B,IAA5BC,EAA2B,uDAAP,GAAO,EACrBrC,mBAAqB,IADA,mBAC1CsC,EAD0C,KAClCC,EADkC,OAErBvC,mBAAqB,IAFA,mBAE1CE,EAF0C,KAElCC,EAFkC,KAI/CqC,qBAAU,WACNC,OAGJ,IAAMlC,EAAe1E,OAAOC,KAAKuG,GAC5Bf,KAAI,SAACrF,GACF,OAAOoG,EAAOpG,MAEjByG,MAAK,SAAC5E,GACH,OAAOA,EAAMyC,gBAEfG,GACDH,GACD1E,OAAOC,KAAKuG,GACPf,KAAI,SAACxD,GACF,OAAOuE,EAAOvE,MAEjB6E,OAAM,SAAC7E,GAAD,OAAWA,EAAM4C,WAEhC,SAAS+B,IACL,IAAIG,EAAwB,GACxBzB,EAAwB,GAE5BtF,OAAOgH,QAAQR,GAAQS,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvCJ,EAAUG,GAAKC,EAAE7D,MACjBgC,EAAU4B,GAAKC,EAAE9C,UAEhB+C,kBAAQX,EAAQM,IACjBL,EAAUK,GAETK,kBAAQ/C,EAAQiB,IACjBhB,EAAUgB,GAGlB,SAASQ,IACLuB,QAAQC,IAAI,mBAAqBC,KAAKC,UAAUf,OAAQgB,EAAW,IAEvE,IAAMrC,EAAQJ,uBAAY,WACtBhF,OAAOC,KAAKuG,GACPf,KAAI,SAACxD,GACF,OAAOuE,EAAOvE,MAEjBgF,SAAQ,SAAChF,GAAD,OAAWA,EAAMmD,aAC/B,CAACoB,IACEzB,EAAQC,uBAAY,WACtBhF,OAAOC,KAAKuG,GACPf,KAAI,SAACxD,GACF,OAAOuE,EAAOvE,MAEjBgF,SAAQ,SAAChF,GAAD,OAAWA,EAAM8C,aAC/B,CAACyB,IACJ,MAAO,CACHC,SACApC,SACAQ,UACAH,eACAU,QACAL,QACAe,UD/CS4B,CAAQ,CAAErB,YAAWC,iBAElC,OACI,kBAACxF,EAAD,KACI,qCACA,kBAAC,EAAD,CACIoC,KAAM,QACNF,GAAI,QACJtB,MAAO,QACPuB,aAAcoD,EAAUhC,OAAO,GAAKgC,EAAUhC,OAAO,GAAK,KAC1D9B,SAAU8D,EAAU9D,SACpBY,SAAUkD,EAAUlD,SACpBC,OAAQiD,EAAUjD,OAClBC,QAASgD,EAAUhD,QACnBb,UAAW6D,EAAU7D,UACrBc,MAAO+C,EAAU/C,MACjBC,YAAa,UAEjB,kBAAC,EAAD,CACIL,KAAM,WACNF,GAAI,WACJtB,MAAO,WACPuB,aAAcqD,EAAajC,OAAO,GAAKiC,EAAajC,OAAO,GAAK,KAChE9B,SAAU+D,EAAa/D,SACvBY,SAAUmD,EAAanD,SACvBC,OAAQkD,EAAalD,OACrBC,QAASiD,EAAajD,QACtBb,UAAW8D,EAAa9D,UACxBc,MAAOgD,EAAahD,MACpB7B,WAAY,gCACZ8B,YAAa,aAEjB,kBAAC,EAAD,CAAQL,KAAK,SAASpB,UAAWyE,EAAK1B,QAAS8C,QAASpB,EAAKT,QAA7D,WEvCG8B,GARH,WACR,OACI,oCACI,kBAAChH,EAAD,MACA,kBAAC,EAAD,QCJZiH,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.ead81252.chunk.js","sourcesContent":["const breakPoints = {\n    sm: '576px',\n    md: '768px',\n    lg: '992px',\n    xl: '1200px',\n};\n\nexport const media = (Object.keys(breakPoints) as Array<keyof typeof breakPoints>).reduce((acc, key) => {\n    acc[key] = (style: String) => `@media (max-width: ${breakPoints[key]}) { ${style} }`;\n    return acc;\n}, {} as { [index: string]: Function });\n","export const colors = {\n    primary: {\n        light: '#9c4dcc',\n        medium: '#6a1b9a',\n        dark: '#380063',\n    },\n    grey: {\n        light: '#eeeeee',\n        medium: '#e0e0e0',\n        dark: '#bdbdbd',\n        textDark: '#616161',\n    },\n    red: '#CC0000',\n    text: {\n        white: '#ffffff',\n        light: '#9e9e9e',\n        medium: '#616161',\n        dark: '#212121',\n    },\n};\n","import { createGlobalStyle } from 'styled-components';\nimport { media } from './media';\nimport { colors } from './colors';\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n    *{\n        box-sizing: border-box;\n    }\n    display: flex;\n    flex-direction: column;\n    padding: 50px;\n    font-family:Arial, Helvetica, sans-serif;\n    font-size:100%;\n    color: ${colors.text.dark};\n    ${media.sm`\n      padding: 15px;\n   `}\n}\n\nh1 {\n    margin: 0.67em 0;\n    font-size: 2.5em;\n    font-weight: 100;\n    }\nh2 {\n    margin: 0.83em 0;\n    font-size: 2em;\n    font-weight: 100;\n    }\nh3{\n    margin: 0.83em 0;\n    font-size: 1.5em;\n    font-weight: 100;\n    }\nh4 {\n    margin: 0.5em 0;\n    font-size: 1.25em;\n    font-weight: 700;\n    }\n    \np {\n    font-size: 1em;\n    }\n`;\n","import styled from 'styled-components';\nimport { media } from './media';\nimport { colors } from './colors';\n\nexport const CenteredBox = styled.div`\n    width: 25rem;\n    height: 25rem;\n    max-width: 600px;\n    max-height: 600px;\n    padding: 32px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n    border: 0.1rem solid ${colors.primary.dark};\n    border-radius: 0.313rem;\n    ${media.sm`\n      width: 100%;\n      padding: 0;\n      border: none;\n   `}\n`;\n","import { colors } from '../../styles';\nconst formColors = {\n    iconColor:{\n        grey: colors.text.medium\n    },\n    fieldBackround: {\n        active: colors.grey.dark,\n        hover: colors.grey.medium,\n        initial: colors.grey.light,\n    },\n    fieldText: colors.text.dark,\n    helperText: colors.text.light,\n    label: {\n        notActivated: colors.text.medium,\n        focus: colors.primary.medium,\n        error: colors.red,\n        disabled: colors.text.light,\n    },\n    border: {\n        error: colors.red,\n        focus: colors.primary.medium,\n        active: colors.text.dark,\n        hover: colors.text.medium,\n        notActivated: colors.text.light,\n    },\n};\n\nexport { formColors };\n","import styled from 'styled-components';\nimport { formColors } from './formColors';\nimport { InputProps, LabelProps, InputGroupProps } from './types';\nimport { media } from '../../styles';\n\nexport const Input = styled.input<InputProps>`\n    position: absolute;\n    width: 100%;\n    padding: 20px 0 0 8px;\n    line-height: 1.25rem;\n    font-size: 1rem;\n    border: none;\n    background-color: inherit;\n    outline: none;\n    color: ${formColors.fieldText};\n`;\n\nexport const InputGroup = styled.div<InputGroupProps>`\n    display: flex;\n    height: 3.6rem;\n    width: 18rem;\n    ${media.sm`\n      width: 100%;\n   `}\n    border-radius: 5px 5px 0 0;\n    background-color: ${formColors.fieldBackround.initial};\n    box-shadow: ${(props) =>\n        props.hasError\n            ? `inset 0 -2.5px 0 0 ${formColors.border.error}`\n            : `inset 0 -1.5px 0 0 ${formColors.border.notActivated}`};\n    :hover {\n        background-color: ${formColors.fieldBackround.hover};\n        box-shadow: ${(props) =>\n            props.hasError\n                ? `inset 0 -2.5px 0 0 ${formColors.border.error}`\n                : `inset 0 -2.5px 0 0 ${formColors.border.hover}`};\n    }\n\n    :focus-within,\n    :focus {\n        background-color: ${formColors.fieldBackround.active};\n        box-shadow: inset 0 -2.5px 0 0 ${(props) => (props.hasError ? formColors.border.error : formColors.border.focus)};\n    }\n`;\n\nexport const InputAndLabelContainer = styled.div<InputProps>`\n    position: relative;\n    width: 100%;\n    flex-grow: 1;\n`;\n\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    height: 1.3rem;\n    padding-left: 8px;\n    width: 12rem;\n    background-color: transparent;\n    top: ${(props) => (props.isActive ? '5px' : '24px')};\n    font-size: ${(props) => (props.isActive ? '0.8rem' : '1rem')};\n    color: ${(props) => labelColor(props.hasError, props.isFocused)};\n`;\n\nexport const HelperText = styled.div`\n    color: ${formColors.helperText};\n    font-size: 0.7rem;\n    margin-top: 2.5px;\n`;\n\nexport const ErrorText = styled.div`\n    color: ${formColors.label.error};\n    font-size: 0.7rem;\n    margin-top: 2.5px;\n`;\n\nexport const FormGroup = styled.div`\n    margin-bottom: 14px;\n    width: 18rem;\n    height: 4.5rem;\n    ${media.sm`\n      width: 100%;\n   `}\n`;\n\nexport const IconContainer = styled.span`\n    width: 24px;\n    margin: 8px 3.2px 0 3.2px;\n    align-self: center;\n`;\n\nfunction labelColor(hasError: boolean, isFocused: boolean) {\n    if (hasError) {\n        return formColors.label.error;\n    } else if (isFocused) {\n        return formColors.label.focus;\n    }\n    return formColors.label.notActivated;\n}\n","import React from 'react';\nimport {\n    InputAndLabelContainer,\n    FormGroup,\n    Input,\n    InputGroup,\n    Label,\n    ErrorText,\n    HelperText,\n    IconContainer,\n} from './styles';\nimport { TextFieldProps, LeadingIcon } from './types';\nimport { MdLock, MdMail, MdError } from 'react-icons/md';\nimport { formColors } from './formColors';\n\nexport const TextField = ({\n    id,\n    label,\n    helperText,\n    errorMessage,\n    isActive,\n    type,\n    onChange,\n    onBlur,\n    onFocus,\n    value,\n    isFocused,\n    leadingIcon,\n    trailingIcon,\n}: TextFieldProps) => {\n    return (\n        <FormGroup>\n            <InputGroup isActive={isActive} hasError={errorMessage !== null}>\n                <IconContainer>{leadingIcon && getIcon(leadingIcon)}</IconContainer>\n                <InputAndLabelContainer isActive={isActive} hasError={errorMessage !== null}>\n                    <Input\n                        id={id}\n                        type={type}\n                        isActive={isActive}\n                        hasError={errorMessage !== null}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onFocus={onFocus}\n                        value={value}\n                        autoComplete={'off'}\n                    />\n                    <Label htmlFor={id} isActive={isActive} isFocused={isFocused} hasError={errorMessage !== null}>\n                        {label}\n                    </Label>\n                </InputAndLabelContainer>\n                <IconContainer>\n                    {errorMessage && <MdError size={'24px'} color={formColors.label.error} />}\n                </IconContainer>\n            </InputGroup>\n\n            {helperText && errorMessage === null && <HelperText>{helperText} </HelperText>}\n            {errorMessage !== null && <ErrorText>{errorMessage}</ErrorText>}\n        </FormGroup>\n    );\n    function getIcon(icon: LeadingIcon) {\n        switch (icon) {\n            case 'email':\n                return <MdMail size={24} color={formColors.iconColor.grey} />;\n            default:\n                return <MdLock size={24} color={formColors.iconColor.grey} />;\n        }\n    }\n};\n","import styled from 'styled-components';\nimport { media, colors } from '../../styles';\n\nconst Button = styled.button`\n    text-decoration: none;\n    border: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0.625rem 0;\n    outline: none;\n    font-size: 1.2rem;\n    background: ${colors.primary.dark};\n    color: ${colors.text.white};\n    width: 18rem;\n    ${media.sm`\n      width: 100%;\n   `}\n    height: 3rem;\n    border-radius: 0.313rem;\n    padding: 1.2rem;\n    outline: none;\n    cursor: pointer;\n    transition: all 0.2s;\n    :hover,\n    :active,\n    :focus {\n        background: ${colors.primary.medium};\n    }\n`;\nexport default Button;\n","import { useState, useCallback } from 'react';\nimport { UseInputOptions, InputHook } from './types';\n\n// TODO get rid of any\nexport function useInput<T>(initial: T, { validations = [] }: UseInputOptions): InputHook<T> {\n    const [value, setValue] = useState<T>(initial);\n    const [errors, setErrors] = useState<string[]>([]);\n    const [touched, setTouched] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    const isValid = errors.length === 0;\n\n    // TODO\n    function submit() {}\n    const clear = useCallback(() => {\n        if (typeof initial === 'string') {\n            setValue('' as any); // TODO Get rid of any\n        }\n    }, [initial]);\n    const onChange = useCallback((e: any) => {\n        if (e.target.type === 'checkbox') {\n            setValue(e.target.checked);\n        } else {\n            setValue(e.target.value);\n        }\n    }, []);\n    const reset = useCallback(() => {\n        setValue(initial);\n    }, [initial]);\n\n    const onBlur = useCallback(() => {\n        setTouched(true);\n        setIsFocused(false);\n        async function validate(): Promise<void> {\n            setIsValidating(true);\n            let newErrors: string[] = [];\n            await Promise.all(\n                validations.map(async (validation) => {\n                    const result = await validation(value);\n                    if (result) {\n                        newErrors.push(result);\n                    }\n                }),\n            );\n            setErrors(newErrors);\n            if (typeof value === 'string') {\n                setIsActive(value.length > 0);\n            } else if (typeof value === 'boolean') {\n                setIsActive(value);\n            }\n            setIsValidating(false);\n        }\n        validate();\n    }, [validations, value]);\n    const onFocus = useCallback(() => {\n        setErrors([]);\n        setIsFocused(true);\n        setIsActive(true);\n    }, []);\n    return {\n        submit,\n        value,\n        setValue,\n        errors,\n        setErrors,\n        touched,\n        setTouched,\n        clear,\n        reset,\n        onChange,\n        onBlur,\n        onFocus,\n        isValid,\n        isValidating,\n        isActive,\n        isFocused,\n    };\n}\n","import { ValidationResult } from './types';\n\nexport const emailFormatValidation = (email: string): ValidationResult => {\n    const reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (email.length === 0) {\n        return 'Email is required.';\n    }\n    if (!reg.test(email)) {\n        return 'Email format is incorrect.';\n    }\n};\n\nexport const passwordValidation = (password: string): ValidationResult => {\n    if (password.length < 1) {\n        return 'Password is required.';\n    }\n    if (password.length < 8) {\n        return 'Password must have minimum 8 characters.';\n    }\n};\n","import React from 'react';\nimport { CenteredBox } from '../../../styles/layout';\nimport { TextField } from '../../TextField';\nimport Button from '../../Button/Button';\nimport { useInput } from '../inputHook';\nimport { useForm } from '../formHook';\nimport { emailFormatValidation, passwordValidation } from '../validation';\ntype LoginUser = {\n    email: string;\n    password: string;\n};\n\nconst LoginForm = () => {\n    const emailHook = useInput<string>('', {\n        validations: [emailFormatValidation],\n    });\n    const passwordHook = useInput<string>('', {\n        validations: [passwordValidation],\n    });\n    const form = useForm({ emailHook, passwordHook });\n\n    return (\n        <CenteredBox>\n            <h2>Login</h2>\n            <TextField\n                type={'email'}\n                id={'email'}\n                label={'Email'}\n                errorMessage={emailHook.errors[0] ? emailHook.errors[0] : null}\n                isActive={emailHook.isActive}\n                onChange={emailHook.onChange}\n                onBlur={emailHook.onBlur}\n                onFocus={emailHook.onFocus}\n                isFocused={emailHook.isFocused}\n                value={emailHook.value}\n                leadingIcon={'email'}\n            />\n            <TextField\n                type={'password'}\n                id={'password'}\n                label={'Password'}\n                errorMessage={passwordHook.errors[0] ? passwordHook.errors[0] : null}\n                isActive={passwordHook.isActive}\n                onChange={passwordHook.onChange}\n                onBlur={passwordHook.onBlur}\n                onFocus={passwordHook.onFocus}\n                isFocused={passwordHook.isFocused}\n                value={passwordHook.value}\n                helperText={'Must be at least 8 characters'}\n                leadingIcon={'password'}\n            />\n            <Button type=\"submit\" disabled={!form.isValid} onClick={form.submit}>\n                Login\n            </Button>\n        </CenteredBox>\n    );\n};\n\nexport default LoginForm;\n","import { useState, useCallback, useEffect } from 'react';\nimport { FormValues, FormErrors, FormProps } from './types';\nimport { isEqual } from 'lodash';\n\nexport const useForm = (inputs: FormProps = {}) => {\n    let [values, setValues] = useState<FormValues>({});\n    let [errors, setErrors] = useState<FormErrors>({});\n\n    useEffect(() => {\n        iterateValues();\n    });\n\n    const isValidating = Object.keys(inputs as FormProps)\n        .map((key: string) => {\n            return inputs[key];\n        })\n        .some((input) => {\n            return input.isValidating;\n        });\n    const isValid =\n        !isValidating &&\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .every((input) => input.isValid);\n\n    function iterateValues() {\n        let newValues: FormValues = {};\n        let newErrors: FormErrors = {};\n\n        Object.entries(inputs).forEach(([k, v]) => {\n            newValues[k] = v.value;\n            newErrors[k] = v.errors;\n        });\n        if (!isEqual(values, newValues)) {\n            setValues(newValues);\n        }\n        if (!isEqual(errors, newErrors)) {\n            setErrors(newErrors);\n        }\n    }\n    function submit() {\n        console.log('submitted values' + JSON.stringify(values, undefined, 2)); // TODO\n    }\n    const reset = useCallback(() => {\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .forEach((input) => input.reset());\n    }, [inputs]);\n    const clear = useCallback(() => {\n        Object.keys(inputs)\n            .map((input) => {\n                return inputs[input];\n            })\n            .forEach((input) => input.clear());\n    }, [inputs]);\n    return {\n        values,\n        errors,\n        isValid,\n        isValidating,\n        reset,\n        clear,\n        submit,\n    };\n};\n","import React from 'react';\nimport {GlobalStyle} from './styles';\nimport LoginForm from './components/Form/LoginForm/LoginForm';\n\nconst App = () => {\n    return (\n        <>\n            <GlobalStyle />\n            <LoginForm />\n        </>\n    );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}